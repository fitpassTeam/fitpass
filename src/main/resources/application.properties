spring.application.name=fitpass

spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

cloud.aws.credentials.access-key=${ACCESS_KEY}
cloud.aws.credentials.secret-key=${AWS_SECRET_KEY}
cloud.aws.s3.bucket=fit-pass-1
cloud.aws.region.static=ap-northeast-2
cloud.aws.stack.auto=false

spring.cache.type=redis

jwt.secret=${SECRET_KEY}

springdoc.packages-to-scan=org.example.fitpass

springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.groups-order=asc
springdoc.swagger-ui.tags-sorter=alpha
springdoc.swagger-ui.operations-sorter=alpha
springdoc.swagger-ui.display-request-duration=true
springdoc.swagger-ui.doc-expansion=none
springdoc.cache.disabled=true
springdoc.override-with-generic-response=false
springdoc.model-and-view-allowed=true
springdoc.default-consumes-media-type=application/json
springdoc.default-produces-media-type=application/json

# ??? ?? ?? ?????
management.endpoints.web.exposure.include=health,info,prometheus,metrics

# Prometheus ??? ???
management.prometheus.metrics.export.enabled=true

# Google OAuth2 ??
spring.security.oauth2.client.registration.google.client-id=${OAUTH_GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${OAUTH_GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.client-name=Google

# Naver OAuth2 ??
spring.security.oauth2.client.registration.naver.client-id=${OAUTH_NAVER_CLIENT_ID}
spring.security.oauth2.client.registration.naver.client-secret=${OAUTH_NAVER_CLIENT_SECRET}
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email,profile_image
spring.security.oauth2.client.registration.naver.client-name=Naver

spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# Toss Payments ??
toss.payments.test-client-key=${TOSS_CLIENT_KEY}
toss.payments.test-secret-key=${TOSS_SECRET_KEY}
toss.payments.success-url=${TOSS_SUCCESS_URL}
toss.payments.fail-url=${TOSS_FAIL_URL}

# ?? ?? ?? (?? ??)
spring.datasource.hikari.maximum-pool-size=80
spring.datasource.hikari.minimum-idle=20
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.connection-timeout=30000

# ???? ??
spring.datasource.hikari.leak-detection-threshold=30000
logging.level.com.zaxxer.hikari=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

