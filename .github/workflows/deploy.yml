name: CI-CD

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main, dev, feature/nested-comment ]

permissions:
  checks: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Create test application properties
        run: |
          mkdir -p src/test/resources
          cat > src/test/resources/application-test.properties << EOF
          spring.datasource.url=jdbc:h2:mem:testdb;MODE=MySQL;DATABASE_TO_LOWER=TRUE
          spring.datasource.driver-class-name=org.h2.Driver
          spring.datasource.username=sa
          spring.datasource.password=
          
          spring.jpa.hibernate.ddl-auto=create-drop
          spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
          spring.jpa.properties.hibernate.format_sql=true
          spring.jpa.show-sql=true
          
          spring.data.redis.host=localhost
          spring.data.redis.port=6379
          spring.data.redis.password=
          spring.cache.type=redis
          
          jwt.secret=test-secret-key-for-testing-purpose-minimum-32-characters
          
          cloud.aws.credentials.access-key=test-access-key
          cloud.aws.credentials.secret-key=test-secret-key
          cloud.aws.s3.bucket=test-bucket
          cloud.aws.region.static=ap-northeast-2
          cloud.aws.stack.auto=false
          
          spring.security.oauth2.client.registration.google.client-id=test-google-client-id
          spring.security.oauth2.client.registration.google.client-secret=test-google-client-secret
          spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
          spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
          spring.security.oauth2.client.registration.google.scope=profile,email
          spring.security.oauth2.client.registration.google.client-name=Google
          
          spring.security.oauth2.client.registration.naver.client-id=test-naver-client-id
          spring.security.oauth2.client.registration.naver.client-secret=test-naver-client-secret
          spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
          spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
          spring.security.oauth2.client.registration.naver.scope=name,email,profile_image
          spring.security.oauth2.client.registration.naver.client-name=Naver
          
          spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
          spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
          spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
          spring.security.oauth2.client.provider.naver.user-name-attribute=response
          
          toss.payments.test-client-key=test-client-key
          toss.payments.test-secret-key=test-secret-key
          toss.payments.success-url=http://localhost:8080/test/success
          toss.payments.fail-url=http://localhost:8080/test/fail
          
          logging.level.org.springframework.web=DEBUG
          logging.level.org.example.fitpass=DEBUG
          logging.level.root=WARN
          logging.level.org.example.fitpass.common.s3=DEBUG
          
          management.endpoints.web.exposure.include=health,info
          management.prometheus.metrics.export.enabled=false
          EOF

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Gradle Tests
          path: build/test-results/test/*.xml
          reporter: java-junit

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/feature/test-code' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build bootJar
        run: ./gradlew bootJar

      - name: Create .env file
        run: |
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "SQL_PORT=${{ secrets.SQL_PORT }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "ACCESS_KEY=${{ secrets.ACCESS_KEY }}" >> .env
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> .env
          echo "OAUTH_NAVER_CLIENT_ID=${{ secrets.OAUTH_NAVER_CLIENT_ID }}" >> .env
          echo "OAUTH_NAVER_CLIENT_SECRET=${{ secrets.OAUTH_NAVER_CLIENT_SECRET }}" >> .env
          echo "REDIS_HOST=redis" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}" >> .env
          echo "TOSS_CLIENT_KEY=${{ secrets.TOSS_CLIENT_KEY }}" >> .env
          echo "TOSS_SECRET_KEY=${{ secrets.TOSS_SECRET_KEY }}" >> .env
          echo "TOSS_FAIL_URL=${{ secrets.TOSS_FAIL_URL }}" >> .env
          echo "TOSS_SUCCESS_URL=${{ secrets.TOSS_SUCCESS_URL }}" >> .env

      - name: Copy all docker-related files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          port: 22
          source: './build/libs/*.jar,./Dockerfile,./docker-compose-prod.yml,.env,src/main/resources/application.properties,src/main/resources/application-prod.properties'
          target: "~/fitpass"

      - name: SSH and deploy via docker-compose (prod)
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script_stop: false
          script: |-
            cd ~/fitpass
            docker-compose -f docker-compose-prod.yml down || true
            docker rm -f redis || true
            docker rm -f spring-app || true
            docker-compose -f docker-compose-prod.yml up --build -d
            sleep 30
            docker-compose -f docker-compose-prod.yml logs --tail=50
            success=false
            for i in $(seq 1 15); do
              echo "($i/15) curl 시도 중..."
              RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" http://127.0.0.1:8080/actuator/health || echo "FAILED")
              if [[ "$RESPONSE" == *"FAILED"* ]]; then
                STATUS="000"
                BODY=""
              else
                STATUS=$(echo "$RESPONSE" | grep "HTTP_CODE" | cut -d':' -f2)
                BODY=$(echo "$RESPONSE" | sed '/^HTTP_CODE:/d')
              fi
              if [ "$STATUS" = "200" ]; then
                echo "✅ Health check passed!"
                success=true
                break
              else
                echo "아직 준비되지 않았습니다. 30초 후 재시도..."
                sleep 30
              fi
            done
            if [ "$success" = true ]; then
              exit 0
            else
              echo "❌ Health check failed"
              docker-compose -f docker-compose-prod.yml logs
              exit 1
            fi