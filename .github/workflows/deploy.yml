name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev
      - feature/separate-env

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: gradlew bootJar
        run: ./gradlew bootJar

      - name: Debug paths in GitHub Actions
        run: |
          echo "Checking paths to be copied"
          ls -la ./build/libs
          ls -la ./

      - name: Create .env file
        run: |
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "SQL_PORT=${{ secrets.SQL_PORT }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "ACCESS_KEY=${{ secrets.ACCESS_KEY }}" >> .env
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> .env
          echo "OAUTH_NAVER_CLIENT_ID=${{ secrets.OAUTH_NAVER_CLIENT_ID }}" >> .env
          echo "OAUTH_NAVER_CLIENT_SECRET=${{ secrets.OAUTH_NAVER_CLIENT_SECRET }}" >> .env
          echo "REDIS_HOST=redis" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}" >> .env
        shell: bash

      - name: Debug check exact .env location
        run: |
          find . -name ".env"

      - name: Copy all docker-related files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          port: 22
          source: './build/libs/*.jar,./Dockerfile,./docker-compose-prod.yml,.env,src/main/resources/application.properties,src/main/resources/application-prod.properties'
          target: "~/fitpass"

      - name: SSH and deploy via docker-compose (prod)
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            cd ~/fitpass
            
            # 중지 및 제거 (prod용 yml)
            docker-compose -f docker-compose-prod.yml down || true

            # 이전 컨테이너 제거 (prod용 이름으로)
            docker rm -f redis-prod || true
            docker rm -f spring-app-prod || true

            # prod 전용 yml로 빌드 및 실행
            docker-compose -f docker-compose-prod.yml up --build -d

            # 로그 확인
            docker-compose -f docker-compose-prod.yml logs --tail=50